# TODO: Add a class for assets and versions
# TODO: Fill out the default fields to be optimal

import shotgun_api3
import pprint

# Creating an API instance
def get_shotgrid(url="https://cphbom.shotgrid.autodesk.com/", script="", key=""):
    return shotgun_api3.Shotgun(url, script_name=script, api_key=key)


PROJECT_FIELDS = [
    "name",
    "id",
    "sg_description",
    "sg_status",
    "users",
    "tank_name",
]

EPISODE_FIELDS = [
    "project",
    "code",
    "id",
    "description",
    "image",
    "sg_status_list",
    "sequence",
]

SEQUENCE_FIELDS = ["project", "code", "id"]

SHOT_FIELDS = ["project", "code", "id"]

TASK_FIELDS = [
    "project",
    "content",
    "id",
    "entity",
    "step",
    "sg_status_list",
    "task_assignees",
    "start_date",
    "due_date",
    "duration",
    "image",
]

sg = get_shotgrid(script="cobopipe", key="fbda0Jg$zihrnynjqhiaywhic")


class Project:
    def __init__(self, fields=None, **kwargs):
        if not kwargs:
            raise ValueError("Missing identifying keyword arguments like name or id")

        self.fields = fields
        if not self.fields:
            self.fields = PROJECT_FIELDS
        self.type = self.__class__.__name__

        for variable, value in kwargs.items():
            if variable in self.fields:
                exec(f"self.{variable} = {repr(value)}")

        update_entity(self)
        self.identity = {"type": self.type, "id": self.id}

    def __repr__(self):
        return repr_entity(self)

    def __str__(self):
        return str_entity(self)

    def get_episodes(self, fields=None):
        if not fields:
            fields = EPISODE_FIELDS
        return get_entity(self.identity, self.type, "episode", fields, Episode)

    def get_sequences(self, fields=None):
        if not fields:
            fields = SEQUENCE_FIELDS
        return get_entity(self.identity, self.type, "sequence", fields, Sequence)

    def get_shots(self, fields=None):
        if not fields:
            fields = SHOT_FIELDS
        return get_entity(self.identity, self.type, "shot", fields, Shot)

    def get_tasks(self, fields=None):
        if not fields:
            fields = TASK_FIELDS
        return get_entity(self.identity, self.type, "task", fields, Task)

    def __getattr__(self, name: str):
        if name == "episodes":
            return self.get_episodes(EPISODE_FIELDS)
        elif name == "sequences":
            return self.get_sequences(SEQUENCE_FIELDS)
        elif name == "shots":
            return self.get_shots(SHOT_FIELDS)
        elif name == "tasks":
            return self.get_tasks(TASK_FIELDS)
        else:
            return self.__dict__[f"{name}"]


class Episode:
    def __init__(self, fields=None, **kwargs):
        if not kwargs:
            raise ValueError("Missing identifying keyword arguments like name or id")

        self.fields = fields
        if not self.fields:
            self.fields = EPISODE_FIELDS
        self.type = self.__class__.__name__

        for variable, value in kwargs.items():
            if variable in self.fields:
                if variable == "name":
                    self.code = "value"
                exec(f"self.{variable} = {repr(value)}")

        update_entity(self)
        self.identity = {"type": self.type, "id": self.id}

    def __repr__(self):
        return repr_entity(self)

    def __str__(self):
        return str_entity(self)

    def get_sequences(self, fields=None):
        if not fields:
            fields = SEQUENCE_FIELDS
        return get_entity(self.identity, self.type, "sequence", fields, Sequence)

    def get_shots(self, fields=None):
        if not fields:
            fields = SHOT_FIELDS

        shots = []
        for sequence in self.get_sequences():
            shots = shots + get_entity(
                sequence.identity, "sg_sequence", "shot", fields, Shot
            )
        return shots

    def get_tasks(self, fields=None):
        if not fields:
            fields = TASK_FIELDS

        tasks = []
        for sequence in self.get_sequences():
            tasks = tasks + get_entity(sequence.identity, "entity", "task", fields, Task)
            for shot in get_entity(sequence.identity, "sg_sequence", "shot", SHOT_FIELDS, Shot):
                tasks = tasks + get_entity(shot.identity, "entity", "task", fields, Task)
        return tasks

    def __getattr__(self, name: str):
        if name == "sequences":
            return self.get_sequences()
        elif name == "shots":
            return self.get_shots()
        elif name == "tasks":
            return self.get_tasks()
        elif name == "name":
            return self.__dict__["code"]
        else:
            return self.__dict__[f"{name}"]


class Sequence:
    def __init__(self, fields=None, **kwargs):
        if not kwargs:
            raise ValueError("Missing identifying keyword arguments like name or id")

        self.fields = fields
        if not self.fields:
            self.fields = SEQUENCE_FIELDS
        self.type = self.__class__.__name__

        for variable, value in kwargs.items():
            if variable in self.fields:
                exec(f"self.{variable} = {repr(value)}")

        update_entity(self)
        self.identity = {"type": self.type, "id": self.id}

    def __repr__(self):
        return repr_entity(self)

    def __str__(self):
        return str_entity(self)

    def get_shots(self, fields=None):
        if not fields:
            fields = SHOT_FIELDS
        return get_entity(self.identity, "sg_sequence", "shot", fields, Shot)

    def get_tasks(self, fields=None):
        if not fields:
            fields = TASK_FIELDS
        return get_entity(self.identity, "entity", "task", fields, Task)

    def __getattr__(self, name: str):
        if name == "shots":
            return self.get_shots()
        if name == "tasks":
            return self.get_tasks()
        elif name == "name":
            return self.__dict__["code"]
        else:
            return self.__dict__[f"{name}"]


class Shot:
    def __init__(self, fields=None, **kwargs):
        if not kwargs:
            raise ValueError("Missing identifying keyword arguments like name or id")

        self.fields = fields
        if not self.fields:
            self.fields = SHOT_FIELDS
        self.type = self.__class__.__name__

        for variable, value in kwargs.items():
            if variable in self.fields:
                exec(f"self.{variable} = {repr(value)}")

        update_entity(self)
        self.identity = {"type": self.type, "id": self.id}

    def __repr__(self):
        return repr_entity(self)

    def __str__(self):
        return str_entity(self)

    def get_tasks(self, fields=None):
        if not fields:
            fields = TASK_FIELDS
        return get_entity(self.identity, "entity", "task", fields, Task)

    def __getattr__(self, name: str):
        if name == "tasks":
            return self.get_tasks()
        elif name == "name":
            return self.__dict__["code"]
        else:
            return self.__dict__[f"{name}"]


class Task:
    def __init__(self, fields=None, **kwargs):
        if not kwargs:
            raise ValueError("Missing identifying keyword arguments like name or id")

        self.fields = fields
        if not self.fields:
            self.fields = TASK_FIELDS
        self.type = self.__class__.__name__

        for variable, value in kwargs.items():
            if variable in self.fields:
                exec(f"self.{variable} = {repr(value)}")

        update_entity(self)
        self.identity = {"type": self.type, "id": self.id}

    def __repr__(self):
        return repr_entity(self)

    def __str__(self):
        return str_entity(self)

    def __getattr__(self, name: str):
        if name == "name":
            return self.__dict__["content"]
        else:
            return self.__dict__[f"{name}"]


def repr_entity(self):
    return f"<ShotGrid.{self.__class__.__name__} object>"


def str_entity(self):
    _string = f"\n<ShotGrid.{self.__class__.__name__} object>\n"
    for variable, value in self.__dict__.items():
        if variable in self.fields:
            _string = _string + f"{variable:<10} \t{pprint.pformat(value)}\n"
    return _string


def get_entity(source_identity, source_type, target_type, fields, return_class):
    filters = [[source_type.lower(), "is", source_identity]]
    data = sg.find(target_type.capitalize(), filters=filters, fields=fields)
    objects = []
    for entity in data:
        objects.append(return_class(_update=False, **entity))
    return objects


def update_entity(self):
    filters = []
    for variable, value in self.__dict__.items():
        if variable == "image":
            continue
        if variable in self.fields:
            if value:
                filters.append([variable, "is", value])

    if not filters:
        raise ValueError("Missing filter data")

    # print(f"\n\nfilters: {filters}\nfields: {self.fields}\n\n")
    data = sg.find(self.type, filters=filters, fields=self.fields)
    if not data:
        return
    for variable, value in data[0].items():
        exec(f"self.{variable} = {repr(value)}")


if __name__ == "__main__":
    project = Project(name="Lego Friends - Wildbrain")
    tasks = project.episodes[0].sequences[0].shots[0].tasks
    print(str(tasks[0]))

    # filters = [["content", "is", "Animation"]]
    # fields = ["entity"]
    # data = sg.find("Task", filters, fields)
    # print(data)